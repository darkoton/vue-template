//< " ОТЗЫВЧИВЫЙ ШРИФТ " >=============================================================================================================>//
@mixin adaptiv-font($pcSize, $mobSize) {
  $addSize: $pcSize - $mobSize;
  $addMobSize: $addSize + $addSize * 0.7;

  @media screen and (max-width: 767px) {
    font-size: calc(#{$mobSize + px} + #{$addMobSize} * ((100vw - 320px) / #{$maxWidth}));
  }

  @media screen and (min-width: 767px) {
    font-size: calc(#{$mobSize + px} + #{$addSize} * (100vw / #{$maxWidth}));
  }
}

//< " ОТЗЫВЧИВЫЙ МЕЖСТРОЧНЫЙ ИНТЕРВАЛ " >=============================================================================================================>//
@mixin adaptiv-line-height($pcHeight, $mobHeight) {
  $addHeight: $pcHeight - $mobHeight;
  $maxWidth: $maxWidth - 320;
  $addMobHeight: $addHeight + $addHeight * 0.7;

  @media (min-width: 767px) {
    line-height: calc(#{$mobHeight + px} + #{$addHeight} * ((100vw - 320px) / #{$maxWidth}));
  }

  @media (max-width: 767px) {
    line-height: calc(#{$mobHeight + px} + #{$addMobHeight} * ((100vw - 320px) / #{$maxWidth}));
  }
}

//< " ОТЗЫВЧИВОЕ ЗНАЧЕНИЕ " >=============================================================================================================>//
@mixin adaptiv-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;

  @if $type==1 {
    /* Если меньше контейнера */
    #{$property}: $startSize + px;

    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }

  @else if $type==2 {
    /* Если больше контейнера */
    #{$property}: $startSize + px;

    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  }

  @else {
    /* Всегда */
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
  }

}

//< " ОТЗЫВЧЕВОЕ ЗНАЧЕНИЕ С ОПРЕДЕЛЕНОЙ ШИРИНЫ ЭКРАНА " >=============================================================================================================>//

@mixin adaptiv-value-width($property, $startSize, $minSize, $width, $type) {
  $addSize: $startSize - $minSize;

  @if $type==1 {
    /* Если меньше контейнера */
    #{$property}: $startSize + px;

    @media (max-width: #{$width + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$width - 320}));
    }
  }

  @else if $type==2 {
    /* Если больше контейнера */
    #{$property}: $startSize + px;

    @media (min-width: #{$width + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 320px) / #{$width - 320}));
    }
  }

}

//< " ОТЗЫВЧИВЫЙ PADDING " >=============================================================================================================>//
// H - horizontal
// V - vertical
@mixin adaptiv-padding($startSizeV, $minSizeV, $startSizeH, $minSizeH, $type) {
  $addSizeV: $startSizeV - $minSizeV;
  $addSizeH: $startSizeH - $minSizeH;

  @if $type==1 {
    /* Если меньше контейнера */
    padding: $startSizeV + px $startSizeH + px;

    @media (max-width: #{$maxWidthContainer + px}) {
      padding: calc(#{$minSizeV + px} + #{$addSizeV} * ((100vw - 320px) / #{$maxWidthContainer - 320}))
               calc(#{$minSizeH + px} + #{$addSizeH} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }

  @else if $type==2 {
    /* Если больше контейнера */
    padding: $startSizeV + px $startSizeH + px;

    @media (min-width: #{$maxWidthContainer + px}) {
      padding: calc(#{$minSizeV + px} + #{$addSizeV} * ((100vw - 320px) / #{$maxWidth - 320}))
               calc(#{$minSizeH + px} + #{$addSizeH} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  }

  @else {
    /* Всегда */
    padding: calc(#{$minSizeV + px} + #{$addSizeV} * ((100vw - 320px) / #{$maxWidth - 320}))
             calc(#{$minSizeH + px} + #{$addSizeH} * ((100vw - 320px) / #{$maxWidth - 320}));
  }

}

//< " ОТЗЫВЧИВЫЙ MARGIN " >=============================================================================================================>//
// H - horizontal
// V - vertical
@mixin adaptiv-margin($startSizeV, $minSizeV, $startSizeH, $minSizeH, $type) {
  $addSizeV: $startSizeV - $minSizeV;
  $addSizeH: $startSizeH - $minSizeH;

  @if $type==1 {
    /* Если меньше контейнера */
    margin: $startSizeV + px $startSizeH + px;

    @media (max-width: #{$maxWidthContainer + px}) {
      margin: calc(#{$minSizeV + px} + #{$addSizeV} * ((100vw - 320px) / #{$maxWidthContainer - 320}))
              calc(#{$minSizeH + px} + #{$addSizeH} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }

  @else if $type==2 {
    /* Если больше контейнера */
    margin: $startSizeV + px $startSizeH + px;

    @media (min-width: #{$maxWidthContainer + px}) {
      margin: calc(#{$minSizeV + px} + #{$addSizeV} * ((100vw - 320px) / #{$maxWidth - 320}))
              calc(#{$minSizeH + px} + #{$addSizeH} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  }

  @else {
    /* Всегда */
    margin: calc(#{$minSizeV + px} + #{$addSizeV} * ((100vw - 320px) / #{$maxWidth - 320}))
            calc(#{$minSizeH + px} + #{$addSizeH} * ((100vw - 320px) / #{$maxWidth - 320}));
  }

}

//< " REM/EM " >=============================================================================================================>//
@function rem($px) {
  $result: ($px / 14)+rem;
  @return $result;
}

@function em($px) {
  $result: ($px / 14)+em;
  @return $result;
}

//< " GRADIENT BORDER/FONT " >=============================================================================================================>//
//< " BORDER " >
@mixin box-gradient($from, $to, $weight: 0) {
  $mix-main: mix($from, $to);
  $mix-sub-from: mix($mix-main, $from);
  $mix-sub-to: mix($mix-main, $to);
  
  box-shadow:
  // left - start color
  -1px   0    0 $weight rgba($from, .75),
  // top left - mix of two colors plus start
  -1px  -1px  0 $weight rgba($mix-sub-from, .25),
  // bottom left - mix of two colors plus start
  -1px   1px  0 $weight rgba($mix-sub-from, .25),
  // top mid - mix of two colors
   0    -1px  0 $weight rgba($mix-main, .5),
  // bottom mid - mix of two colors
   0     1px  0 $weight rgba($mix-main, .5),
  // top right - mix of two colors plus end
   1px  -1px  0 $weight rgba($mix-sub-to, .25),
  // bottom right - mix of two colors plus end
   1px   1px  0 $weight rgba($mix-sub-to, .25),
  // right - end color
   1px   0    0 $weight rgba($to, .75);
}



//< " BORDER LEFT & RIGHT " >
@mixin border-gradient($from, $to, $width) {
  border-left: $width solid $from;
  border-right: $width solid $to;
  background-image:
    // both needed for top & bottom
    linear-gradient(left, $from, $to),
    linear-gradient(left, $from, $to);
  
  // 100% left & right, $width px top & bottom
  background-size: 100% $width;
  background-position: 0 100%, 0 0;
  background-repeat: no-repeat;
  background-clip: border-box;
}

//< " BORDER border-image" >
@mixin border-image($width, $deg: 0deg, $colors...) {
  border-image: linear-gradient($deg, $colors);
  border-image-slice: 1;
  border-image-width: $width;
}

//< " FONT " >
@mixin font-gradient($dir, $colors... ) {
  background: -webkit-linear-gradient($dir, $colors);
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
}